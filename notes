REACT FORMS

- the amount of times I have types this and not actually created anything, amazes me
- so from the data I wan the:
1)it currently gives us an array of objects that we are going to have to loop over and grab what we want
form each object we want:
2)display_title, headline,link,multimedia.src,
- so then we want to put these all in the state for each individual and then loop over them to create the react component
- so first we need to get them into the state. maybe we wan to use the map method. ok no we will only use the map method
for when we want to render out the state. right now forRach element in the response we want to set the state. so read
everything on how Hooks work.
- updating a state varible will always replace it instead of merging it. the spreading ensures that we don't loose any
code.
- so the initial value of useState is ignored after the first render. the first time React renders a function component, it
creates an object to live alognside it. using that object, React can keep track of various bits of metadata that
belong to a component
- so I can already see that my problem was that I was calling the hook inside of a loop and not top side

  Writting Custom Hooks:
  - when we want to share logic between two javascript functions, we extract it to a third function.
  - a custom hooks is a Javascript functions whoses name starts with "use" and that may call other Hooks
  - when react calls useState multiple times(say two) those two entries are put in the array of hooks on the first render
  - the next time it renders those same 3 hooks are called in the same order, so React can look into
  its array and say oj I already have a useState hook in position 0, so instead of creating a new state, I'll return the
  existing one.
  -so when react Creates a component, before it creates a function, it creates the metatdata object, and the empty array
  of hooks.The first hook that runs will consime position 0
  - React then calls your component(whihc means it knows which metadata object to store the hooks in )
  - you call useState. React creates a new piece of state, puts it in position 0 of the hooks array and returns
  the tuple
  - so when react rerenders again it sets the index of the metadata object back to 0 and then calls the component.
  - we might have to use useEffecthook. ya so I think my solution is to move the data varible up to a outer function and then
  have the useEffecthook to listen to change on that varible and then call set info on that.

  USEEFFECT:
  - the function passed to useEffect will run after the render is committed to the screen.
  - by defualt effects runafter ever completed render
  -so our use effect will run after the completed render, but we can put a conditiional rendering on it
  -our call to setState will enque a rerender of the component.
  - I am now gettting an ifinite loop on useEffect.

  -use effect is executed eachtime the component is rendered. this means that if you modify the components state inside
  useEffect, it will cause a re-render of the component again and again
  - I still think what is holding me back is my lack of understanding of hooks and how to use them

  FETCHING DATA WITH USEEFFECT:
  -so our data fetching function will go like this. when onClick is triggerd it will convert the on state varible loading and
  set it to true, the useEffect hook will see that as a change and then run its data fetch, then it will make the async call
  -we will use an async/await function for the api call
  -so I definetly need to read up on async and await syntax.

  -await is a new operator used to wait for a promise to resolve or reject. it can only be used inside an async function
  - for error handling we can use the try catch statments. this would be syncronous error handling. however this
  doesnt work when a promise is rejected, but alos when there is an actual runtime or syntax error happening.
  - the async function returns a promise and then that promise must be consumed with a .then() method
  -.then() chaining is used for when you need to make another anyc request
  - so when we put the await keyword in front of something, the code will stop execution and wait until that line is finished
  - when error handling, we should use the .then and the .catch() methods
  - we should define our async function and then call it with a .then() and .catch() methods
  - onChange we are chaging one varible, in our aplicaiton that is called state, so when the user updates the form the setState
  is called and the state gets updated

  -so in order for out useEffect to be called when the form is submitted, we need two set states. The one being a value
  that is valled each time the form is updated, to gives us the value we want to search. The second Hook is the most
  important, it is what we put in the dependency array of useEffect to decide if the function should be called or not.
  - when our form is submitted we will call the hook called search and set it using the value of state.
  that way the useEffect hook will run when the form is submitted and it will get the value of the form.
  -we will use the loading a loading hook to indicated a loading flag that will be rendered in our app component

  ERROR HANDLING WITH REACT HOOKS:
  - errors can just be though of another state initialized with a state hook. Once there is an error statem the app component
  can fender feedback accordingly
  - when using async/awaut, it is common to use try/catch block for error handling. You can do this within in effect
  -A catch-block contains statement tha specify what to do if an exception is thrown int he try-block. if any statement
  within the try-block(or in a function called from within the try-block) throws an exception, control is immediately
  shifted to the catch-block. if no exception is thrown in the try-block, the catch is skipped
  - so it seems that the try block will always run but the catch block will only run if there is an exception thrown
  - in order to make sure that we can get rid of the erorr messages. we need to call the error hook twice. once when
  we run the useEffect method(setErorrs(false)), and when there is actually an error(setErorrs= true). the first call
  to that hook is to make sure that the error disapears after we make another call.
  - so technically the try and catch blocks are not conditionals.

  -CREATING A CUSTOM HOOK
  - custom hooks are freer meaning that you can input any varibles and return anything you want.
  - ya its literally just a fucntion that has to start with use.


  RENDERING COMPONENTS FROM THE RETRIEVED DATA
  -we use the javascript map function. the map method creates a new array populated with the results of calling a provided
  function on every element in the array.

  - so I ran into a problem an I think it has something to do with my lack of understanding of how component
  render in react.
  - every component follows a cycle from when it's created and mounted on the DOM to when it is unmounted and
  destroyed, this is the component lifecycle
  the lifecycle is categorized into three parts: MOUNTING, UPDATING AND UNMOUNTING
  - HOOKS get called automatically at each point in the lifecycle.
  - when our component mounts it is inserted into the DOM, render will be called during this time 


- so I think we want a forEach method to loop through it all
response.forEach(element=>{
  const {display_title, headline,link,multimedia.src} = element
  setState(state =>({...state,{title:display_title, headline,link,media:multimedia.src}} ))

})
